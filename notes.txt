一、pytest.ini中的配置
1.addopts
    -v                       # 输出详细信息
    -s                       # 输出调试信息
    -n=2                     # 多线程运行
    -x                       # 只要有一个用例失败就会停止执行
    -m "users"               # 执行指定模块的用例，可以指定多个模块，如"users or order"
    -k "users"               # 执行用例方法中含有users的方法
    --reruns=n               # 失败之后重跑n次
    --maxfail=n              # 只要有n个用例失败就会停止
    --html=./reports/r.html  # 生成html格式的测试报告到指定路径
    --alluredir ./temps --clean-alluredir  # 在指定的目录下生成json格式的测试报告
2.testpaths = ./testcases    # 测试用例所在的路径
3.python_files = test_*.py   # 测试用例所在的py文件的命名规则
4.python_classes = Test*     # 测试用例类的命名规则
5.python_functions = test_*  # 测试用例方法的命名规则
6.base_url = "http://www.baidu.com"   # 基础路径，可以传入测试用例方法之后直接调用
7.markers =                  # 创建标记模块
    smoke: 冒烟用例
    users: 用户模块
    order: 订单模块
二、常见装饰器
    1.控制执行顺序
        @pytest.mark.run(order=1)
    2.给测试用例方法添加标记（一般用来指定案例是哪个模块的）
        @pytest.mark.users
    3.跳过测试用例
        @pytest.mark.skip(reason="暂时保留")  # 无条件跳过
        @pytest.mark.skipif(age<20, reason="有条件跳过")  # 有条件跳过
三、测试用例的前后置
    1.传统方法
        def setup_class(self):  # 类级别前置
            pass
        def teardown_class(self):   # 类级别后置
            pass
        def setup_method(self):  # 方法级别前置
            pass
        def teardown_method(self):  # 方法级别后置
            pass
    2.fixture固件（可以实现部分前后置，默认为前置）
        @pyteset.fixture(scope='作用域', autouse='自动执行',
                         ids=['success', 'fail'], name='sql'
                         params=['登录成功','登录失败'], )
        def demo(request):    # 只有在使用params时才需要request
            print("用例之前执行")
            yield request.param          # print(demo)会打印yield后的值，在function级别手动调用的情况下才能取到
            print("用例之后执行")
        ①scope: function/class/module/session
        ②autouse: True/False
            -- 默认为False，如果scope为function,手动调用时需要把固件函数名放在测试用例函数参数中
               如：def test_get_token(self, demo):
                      pass
            -- 如果scope为class,手动调用时需要在测试类上添加装饰器@pytest.mark.usefixtures("固件函数名")
        ③params 参数化
            -- 列表或元组，只有autouse=False时才会用到此参数，此时scope一般为function
        ④ids
            -- 参数化时参数的别名，一般和参数化的数量对应
        ⑤name
            -- 固件别名
    3.conftest  # 用来放fixture固件的容器
    4.固件和conftest都可以存在多个，自动调用的情况下，外层的conftest优先级更高
四、生成allure报告
    1.安装allure环境
        ①安装allure-pytest插件  -- pip install allure-pytest
        ②官网下载allure报告文件(下载zip文件)   -- http://github.com/allure-framework/allure2/releases
        ③将allure文件的bin目录路径配置到环境变量path中
        ④验证是否安装成功  -- docs窗口中输入allure --version显示版本号
    2.生成测试报告
        ①生成json格式的测试报告
            addopts = --alluredir ./temps --clean-alluredir
        ②生成allure格式的测试报告
            if __name__ == '__main__'
                pytest.main()
                time.sleep(2)
                os.system('allure generate ./temps -o ./reports --clean')
    3.定制Logo
        ①在/allure/config/allure.yml中增加一行配置(增加是另一个目录的名字/allure/plugins/custom-logo-plugin)
          plugins:
            - custom-logo-plugin
        ②在/allure/plugins/custom-logo-plugin/static 添加Logo图片
        ③在/allure/plugins/custom-logo-plugin/static/styles.css中修改样式
            .side-nav__brand{
              background: url('Logo5.png') no-repeat left center !important;
              margin-left: 22px;
              height: 90px;
              background-size: contain !important;
            }
            .side-nav__brand-text{
              display: none;
            }
    4.项目结构定制
        ①测试类上方的装饰器
            ● @alure.epic('项目名称：xxx')        # 添加在测试类上边，表示项目名称
            ● @alure.feature('模块名称：xxx')     # 添加在测试类上边，表示模块名称
        ②测试方法上方的装饰器
            ● @alure.story('接口名称：xxx')       # 添加在测试方法上边，表示接口名称
            ● @alure.title('成功登录')            # 添加在测试方法上边，表示用例标题
            ● @allure.description('用例描述')     # 用例说明描述
            ● @allure.link(url='接口访问链接', name='名称')         # 接口访问链接
            ● @allure.issue(url='bug链接',  name='名称')           # bug链接
            ● @allure.testcase(url='测试用例链接',  name='名称')     # 用例说明描述
            ● @allure.severity(allure.severity_level.BLOCKER)     # 优先级定制
              BLOCKER   # 致命
              CRITICAL  # 严重
              NORMAL    # 一般
              MINOR     # 提示
              TRIVIAL   # 轻微
        ③方法内部定制
            ● allure.dynamic.story('接口名称：xxx')                        # 添加在测试方法上边，表示接口名称
            ● allure.dynamic.title('成功登录')                            # 添加在测试方法内部，表示用例标题
            ● allure.dynamic.description('用例描述')                      # 添加在测试方法内部，表示用例说明描述
            ● allure.dynamic.link(url='接口访问链接',  name='名称')                          # 接口访问链接
            ● allure.dynamic.issue(url='bug链接',  name='名称')                            # bug链接
            ● allure.dynamic.testcase(url='测试用例链接',  name='名称')                      # 测试用例链接
            ● allure.dynamic.severity(allure.severity_level.BLOCKER)                     # 优先级定制
            ● with allure.step('第一步：xxx'):                                             # 测试用例步骤并添加附件，如果不加附件，需在步骤后边加pass(web自动化)
                with open('路径', mode='rb') as f:
                    allure.attach(body=f.read(), name='xxx', attachment_type=allure.attachment.PNG)
            ● allure.attach(body='get', name='请求方式', attachment_type=allure.attachment.TXT)   # 测试用例附件(接口自动化)
    5.生成局域网内的测试报告路径
        if __name__ == '__main__':
            os.system('allure open ./reports')
五、数据驱动相关
    1.yaml语法
        ①安装pyyaml
        ②读取方法：yaml.safe_load(f)
        ③类型转换：!!int 变量 !!float 变量 !!str 变量 !!bool 变量
        ④引用：&变量 建立锚点  *变量 引用锚点
        ⑤合并：&变量 建立锚点 <<:*变量 合并
        baili: &baidi
          - name: 百里
          - age: !!str 18
        msjy:
          data1: 码尚
          teacher: *baidi
          <<: *baidi
    2.yaml读写
        ①写入：yaml.safe_dump(data, f, allow_unicode=True)   mode='w'
        ②读取：yaml.safe_load(f, Loader=yaml.FullLoader)     mode='r'
        ③清空：f.truncate()        mode='w'
    3.参数化
        pytest.mark.parametrize(参数名, 参数值list/tuple)
        ①形式1
            pytest.mark.parametrize('key', [dict1,dict2...])
        ②形式2
            pytest.mark.parametrize('key1,key2...', [(value1,value2...),(value1,value2...)])
六、requests模块
    1.常见的请求头Content-Type
        ①application/x-www-form-urlencoded   # 表单
        ②application/json                    # json数据
        ③multipart/form-data                 # 文件上传
        ④application/octrent-stream          # 二进制上传
    2.requests发送请求的方式
        ①requsets.请求方式()
        ②requests.request()
        ③requests.session().request()
    3.请求数据
        文件上传的特殊方式，可以上传多个文件
        files = {"upload":("a.png","content", "image/png")}  # 文件名、内容、格式
    4.响应对象的属性和方法
        text  json()  status_code  cookies  encoding  headers  request.method  request.url  request.headers  request.body
        content  # 二进制
        reason   # 状态信息
        elapsed  # 耗时
    5.变量提取
        ①正则re
            re.search(pattern, string).group(1)     # 提取单个值，返回的是一个对象，通过group(1)取值
            re.findall(pattern, string)[0]          # 提取多个值，返回的是一个列表，通过下标[0]取值
        ②jsonpath.jsonpath(obj, expr)              # 返回的是一个列表，通过下标[0]取值
            $.node[index]   # .为取字典的key,[]为通过索引取列表中的值
            $..node         # ..为递归取值，返回的是一个列表
        ③编码格式
            unicode urlencoded
        ④模版替换的方法 Template
            t = Template('${name} age is ${age}')
            print(t.substitute(name='', age='')
            print(t.substitute({'name':'', 'age':''})  # 也可以通过字典传值
            print(t.safe_substitute(name='', age='')  # 这种方法少传值时不会报错
七、框架思路
    ①在test_all_case中通过反射的原理往测试类中逐一增加测试方法
    ②测试方法组成：
        -- 封装在main_util.py的stand_case_flow方法中
        ●通过verify_yaml方法校验传入的caseinfo的有效性
        ●通过change方法以热加载的方式替换请求数据中${func(arg1,arg2..)}格式的数据
        ●通过send_all_request统一发送请求
        ●通过extract方法进行变量提取

八、生成日志的方法
    ①pytest.ini文件中增加两行配置
        log_file = ./logs/frame.log     # 指定日志文件路径
        log_file_level = INFO           # 日志级别 DEBUG INFO WARNING ERROR CAITIAL
        log_file_format = %(asctime)s %(levelname)s %(filename)s %(message)s   # 日志格式
    ②在根路径下创建一个logs目录，在该目录下创建一个log文件，比如frame.log
    ③生成日志对象
        logger = logging.getLogger(__name__)
    ④写入日志到文件
        logger.info(res.text)
九、断言
    ①格式
        validate:
        equals:
          断言状态码为200: [200, status_code]
        contains:
          断言包含access_token: [access_token, text]
        db_equals:
        db_contains:
十、数据驱动和流程用例
    单接口和流程用例的区别：
        单接口的yaml文件中只有一个字典，流程用例中有多个
    单接口和数据驱动的区别：
        单接口yaml文件中没有parametrize,数据驱动中有parametrize

十一、基础路径
    1.在pytest.ini文件中配置基础路径
        [base_url]
        weixin_base_url: https://api.weixin.qq.com
        shopxo_base_url: http://101.34.221.219:8010
    2.创建base_url.py文件，封装一个读取base_url的方法，返回一个字典
        def read_ini():
            ini = IniConfig('./pytest.ini')
            if 'base_url' not in ini:
                return {}
            else:
                return dict(ini['base_url'].items())
    3.在debug_talk.py中封装一个读取指定base_url的方法，之后在测试用例的yaml文件中可以直接调用
            def env(self, key):
                return read_ini()[key]













